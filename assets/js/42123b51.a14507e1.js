"use strict";(self.webpackChunkhome=self.webpackChunkhome||[]).push([[5063],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},g=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(h,s(s({ref:t},g),{},{components:n})):r.createElement(h,s({ref:t},g))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6025:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={slug:"streamlining-security-integrating-findings-as-development-issues",authors:"scherersebastian",tags:["Security Engineering","Findings","Issues"]},s="Streamlining Security: Integrating Findings as Development Issues",o={permalink:"/home/blog/streamlining-security-integrating-findings-as-development-issues",editUrl:"https://github.com/scherersebastian/home/blob/main/blog/2023-10-13-streamlining-security-integrating-findings-as-development-issues/index.md",source:"@site/blog/2023-10-13-streamlining-security-integrating-findings-as-development-issues/index.md",title:"Streamlining Security: Integrating Findings as Development Issues",description:"During my work as a security engineer on the CatenaX project, I made a significant discovery. We had integrated the Veracode tool, and developers could only access their findings by switching to the Veracode platform. This meant that developers had to go through the time-comsuming process of logging into another platform, creating a new set of credentials, requesting access, and then attempting to locate their findings within the huge Veracode platform. It was an ineffective and frustrating process.",date:"2023-10-13T00:00:00.000Z",formattedDate:"October 13, 2023",tags:[{label:"Security Engineering",permalink:"/home/blog/tags/security-engineering"},{label:"Findings",permalink:"/home/blog/tags/findings"},{label:"Issues",permalink:"/home/blog/tags/issues"}],readingTime:4.415,hasTruncateMarker:!0,authors:[{name:"Sebastian Scherer",title:"Security Engineer",url:"https://scherersebastian.github.io/home/",imageURL:"https://avatars.githubusercontent.com/u/59142915?v=4",key:"scherersebastian"}],frontMatter:{slug:"streamlining-security-integrating-findings-as-development-issues",authors:"scherersebastian",tags:["Security Engineering","Findings","Issues"]},prevItem:{title:"How to Suck at Information Security",permalink:"/home/blog/how-to-suck-at-information-security"},nextItem:{title:"Car Privacy: Mozilla's Observations",permalink:"/home/blog/car-privacy-mozillas-observations"}},l={authorsImageUrls:[void 0]},c=[],g={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"During my work as a security engineer on the CatenaX project, I made a significant discovery. We had integrated the Veracode tool, and developers could only access their findings by switching to the Veracode platform. This meant that developers had to go through the time-comsuming process of logging into another platform, creating a new set of credentials, requesting access, and then attempting to locate their findings within the huge Veracode platform. It was an ineffective and frustrating process."),(0,i.kt)("p",null,"Out of this pain and the desire to streamline the workflow for developers, I created ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/scherersebastian/issue-injector"},(0,i.kt)("strong",{parentName:"a"},"IssueInjector")),". For a deeper dive into the technical details of Issue Injector, you can refer to a separate article. In this article, we'll focus on why this workflow is so beneficial for developers."),(0,i.kt)("p",null,"In the realm of security, ensuring that vulnerabilities are addressed promptly is of utmost importance. But when and how should these vulnerabilities be shared within an organization?"),(0,i.kt)("p",null,"This article explores the idea of seamlessly integrating findings and potential threats directly into the development workflow as issues or stories."))}p.isMDXComponent=!0}}]);